{"version":3,"file":"static/js/926.d1b7622f.chunk.js","mappings":"8OAae,SAASA,EAAUC,GAChC,IAAIC,GAAWC,EAAAA,EAAAA,MACXC,GAASC,EAAAA,EAAAA,MACb,GAAsCC,EAAAA,EAAAA,MAAtC,eAAKC,EAAL,KAEA,GAFA,MAEwBC,EAAAA,EAAAA,UAAS,OAAjC,eAAOC,EAAP,KAAaC,EAAb,MACmBC,EAAAA,EAAAA,QAAO,OAC1BC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAkB,IAAIC,gBACtBL,EAAOF,EAAaQ,IAAI,SAC5B,GAAKN,EAKL,OAJAO,EAAAA,EAAAA,YAAgB,eAAgBH,EAAiBJ,GAAMQ,MAAK,SAACC,GAC3DR,EAAQQ,EAASC,QAClB,IAEM,kBAAMN,EAAgBO,OAAtB,CACR,GAAE,CAACb,EAAaQ,IAAI,WAYrB,OACE,SAAC,IAAD,WACE,4BACE,mBACEM,UAAU,cACVC,QAAS,WACPpB,GAAU,EACX,EAJH,sBAQEE,EAAOmB,UACP,0BACE,0BACE,wBACGd,GACCA,EAAKe,KAAI,SAACC,GAAD,OACP,yBACE,SAAC,KAAD,CAAMC,GAAI,UAAYD,EAAQE,GAA9B,SAAmCF,EAAQG,SADpCH,EAAQE,GADV,UASlBvB,EAAOmB,UAAW,SAAC,KAAD,QAI1B,C,oBCtED,IAAMM,EAAM,mCAgBNb,EAAM,CACVc,YAfkB,SAACC,EAAQlB,GAAiC,IAAhBmB,EAAe,uDAAP,GACpD,MAAiB,KAAVA,EACHC,MAAM,gCAAD,OAAiCF,EAAjC,oBAAmDF,GAAO,CAC7DK,OAAQrB,EAAgBqB,SACvBjB,MAAK,SAAAC,GACN,OAAOA,EAASiB,MACjB,IACDF,MAAM,gCAAD,OAAiCF,EAAjC,oBAAmDF,EAAnD,kBAAgEG,GAAS,CAC5EE,OAAQrB,EAAgBqB,SACvBjB,MAAK,SAAAC,GACN,OAAOA,EAASiB,MACjB,GACN,GAMD,K","sources":["components/MoviesPage/MoviesPage.js","services/api.js"],"sourcesContent":["import {\n  Outlet,\n  useNavigate,\n  useParams,\n  useSearchParams,\n  Link,\n} from \"react-router-dom\";\nimport { useEffect, useState, useRef } from \"react\";\nimport ErrorBoundary from \"../ErrorBoundary\";\nimport api from \"../../services/api\";\nimport \"../../App.css\";\nimport \"../Common.css\";\n\nexport default function MoviePage(props) {\n  let navigate = useNavigate();\n  let params = useParams();\n  let [searchParams, setSearchParams] = useSearchParams();\n\n  const [data, setData] = useState(null);\n  const elementRef = useRef(null);\n  useEffect(() => {\n    let abortController = new AbortController();\n    let data = searchParams.get(\"query\");\n    if (!data) return;\n    api.fetchMovies(\"search/movie\", abortController, data).then((response) => {\n      setData(response.results);\n    });\n\n    return () => abortController.abort();\n  }, [searchParams.get(\"query\")]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    let query = elementRef.current.value;\n    if (query) {\n      setSearchParams({ query });\n    } else {\n      setSearchParams({});\n    }\n  };\n\n  return (\n    <ErrorBoundary>\n      <div>\n        <button\n          className=\"back-button\"\n          onClick={() => {\n            navigate(-1);\n          }}\n        >\n          Go back\n        </button>\n        {!params.movieId && (\n          <div>\n            <div>\n              <ul>\n                {data &&\n                  data.map((element) => (\n                    <li key={element.id}>\n                      <Link to={\"/movie/\" + element.id}>{element.title}</Link>\n                    </li>\n                  ))}\n              </ul>\n            </div>\n          </div>\n        )}\n        {params.movieId && <Outlet />}\n      </div>\n    </ErrorBoundary>\n  );\n}\n\n// import {\n//   Outlet,\n//   useNavigate,\n//   useParams,\n//   useSearchParams,\n//   Link,\n// } from \"react-router-dom\";\n// import { useEffect, useState, useRef } from \"react\";\n// import ErrorBoundary from \"../ErrorBoundary\";\n// import api from \"../../services/api\";\n// import styled from \"@emotion/styled\";\n// import \"../../App.css\";\n// import \"../Common.css\";\n\n// export default function MoviePage(props) {\n//   let navigate = useNavigate();\n//   let params = useParams();\n//   let [searchParams, setSearchParams] = useSearchParams();\n\n//   const [data, setData] = useState(null);\n//   const elementRef = useRef(null);\n//   useEffect(() => {\n//     let abortController = new AbortController();\n//     let data = searchParams.get(\"query\");\n//     if (!data) return;\n//     api.fetchMovies(\"search/movie\", abortController, data).then((response) => {\n//       setData(response.results);\n//     });\n\n//     return () => abortController.abort();\n//   }, [searchParams.get(\"query\")]);\n\n//   const handleSubmit = (event) => {\n//     event.preventDefault();\n//     let query = elementRef.current.value;\n//     if (query) {\n//       setSearchParams({ query });\n//     } else {\n//       setSearchParams({});\n//     }\n//   };\n\n//   return (\n//     <ErrorBoundary>\n//       <div>\n//         <button\n//           className=\"back-button\"\n//           onClick={() => {\n//             navigate(-1);\n//           }}\n//         >\n//           Go back\n//         </button>\n//         {!params.movieId && (\n//           <div>\n//             <form\n//               onSubmit={handleSubmit}\n//               value={searchParams.get(\"query\") || \"\"}\n//             >\n//               <input type=\"text\" ref={elementRef}></input>\n//               <button className=\"back-button\" type=\"submit\">\n//                 Search\n//               </button>\n//             </form>\n//             <div>\n//               <ul>\n//                 {data &&\n//                   data.map((element) => (\n//                     <li key={element.id}>\n//                       <Link to={\"/movie/\" + element.id}>{element.title}</Link>\n//                     </li>\n//                   ))}\n//               </ul>\n//             </div>\n//           </div>\n//         )}\n//         {params.movieId && <Outlet />}\n//       </div>\n//     </ErrorBoundary>\n//   );\n// }\n","const KEY = 'b8d87910aac56b00d09e566d900045a1';\n\nconst fetchMovies = (ending, abortController, query = '') => {\n  return query === ''\n    ? fetch(`https://api.themoviedb.org/3/${ending}?api_key=${KEY}`, {\n        signal: abortController.signal,\n      }).then(response => {\n        return response.json();\n      })\n    : fetch(`https://api.themoviedb.org/3/${ending}?api_key=${KEY}&query=${query}`, {\n        signal: abortController.signal,\n      }).then(response => {\n        return response.json();\n      });\n};\n\nconst api = {\n  fetchMovies,\n};\n\nexport default api;\n"],"names":["MoviePage","props","navigate","useNavigate","params","useParams","useSearchParams","searchParams","useState","data","setData","useRef","useEffect","abortController","AbortController","get","api","then","response","results","abort","className","onClick","movieId","map","element","to","id","title","KEY","fetchMovies","ending","query","fetch","signal","json"],"sourceRoot":""}